
type Properties struct{ iface dbus.Interface }

// New returns an interface to TODO
func New(conn *dbus.Conn) Properties {
	obj := conn.Peer("TODO").Object("TODO")
	return Interface(obj)
}

// Interface returns a Properties on the given object.
func Interface(obj dbus.Object) Properties {
	return Properties{
		iface: obj.Interface("org.freedesktop.DBus.Properties"),
	}
}

func (iface Properties) Get(ctx context.Context, arg0 string, arg1 string) (arg0 interface{}, err error) {
	req := struct {
		Arg0 string
		Arg1 string
	}{
		Arg0: arg0,
		Arg1: arg1,
	}
	err = iface.iface.Call(ctx, "Get", req, &arg0)
	return arg0, err
}

func (iface Properties) GetAll(ctx context.Context, arg0 string) (arg0 map[string]interface{}, err error) {
	err = iface.iface.Call(ctx, "GetAll", arg0, &arg0)
	return arg0, err
}

func (iface Properties) Set(ctx context.Context, arg0 string, arg1 string, arg2 interface{}) error {
	req := struct {
		Arg0 string
		Arg1 string
		Arg2 interface{}
	}{
		Arg0: arg0,
		Arg1: arg1,
		Arg2: arg2,
	}
	err := iface.iface.Call(ctx, "Set", req, nil)
	return err
}

// PropertiesChanged implements the signal org.freedesktop.DBus.Properties.PropertiesChanged.
type PropertiesChanged struct {
	InterfaceName         string
	ChangedProperties     map[string]interface{}
	InvalidatedProperties []string
}

func init() {
	dbus.RegisterSignalType[PropertiesChanged]("org.freedesktop.DBus.Properties", "PropertiesChanged")
}